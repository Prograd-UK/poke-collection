// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model PokemonType {
  id        String                 @id @default(cuid())
  name      String                 @unique
  icon      String?
  pokemon   PokemonTypeOnPokemon[]
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

model Pokemon {
  id          String                 @id @default(cuid())
  name        String                 @unique
  imageUrl    String
  types       PokemonTypeOnPokemon[]
  likes       Like[]
  collections PokemonOnCollection[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model PokemonTypeOnPokemon {
  id        String      @id @default(cuid())
  slot      Int
  pokemon   Pokemon     @relation(fields: [pokemonId], references: [id])
  pokemonId String
  type      PokemonType @relation(fields: [typeId], references: [id])
  typeId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([pokemonId, typeId])
  @@unique([pokemonId, slot])
  @@index([pokemonId])
  @@index([typeId])
}

model Like {
  id        String   @id @default(cuid())
  pokemon   Pokemon? @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  pokemonId String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pokemonId, userId])
  @@index([pokemonId])
  @@index([userId])
}

model Collection {
  id          String                @id @default(cuid())
  name        String
  description String?
  userId      String
  pokemon     PokemonOnCollection[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@index([userId])
}

model PokemonOnCollection {
  id           String     @id @default(cuid())
  pokemon      Pokemon    @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  pokemonId    String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([pokemonId, collectionId])
  @@index([pokemonId])
  @@index([collectionId])
}
